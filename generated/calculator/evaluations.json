{
  "server_info": {
    "source": "mcp_servers/calculator/server.py",
    "generated_at": "2025-10-20T10:18:08.301447",
    "tools_count": 5
  },
  "evaluations": [
    {
      "tool": "add",
      "description": "Add two numbers together",
      "test_cases": [
        {
          "id": "add_valid_positive",
          "type": "valid_params",
          "description": "Add two positive numbers",
          "params": {
            "a": 5.0,
            "b": 3.0
          },
          "expected_result": "success",
          "expected_contains": [
            "8"
          ]
        },
        {
          "id": "add_valid_negative",
          "type": "valid_params",
          "description": "Add two negative numbers",
          "params": {
            "a": -10.5,
            "b": -2.5
          },
          "expected_result": "success",
          "expected_contains": [
            "-13"
          ]
        },
        {
          "id": "add_valid_mixed",
          "type": "valid_params",
          "description": "Add positive and negative number",
          "params": {
            "a": 15.0,
            "b": -7.0
          },
          "expected_result": "success",
          "expected_contains": [
            "8"
          ]
        },
        {
          "id": "add_valid_decimals",
          "type": "valid_params",
          "description": "Add decimal numbers",
          "params": {
            "a": 3.14159,
            "b": 2.71828
          },
          "expected_result": "success",
          "expected_contains": [
            "5.85987"
          ]
        },
        {
          "id": "add_valid_zero",
          "type": "valid_params",
          "description": "Add with zero",
          "params": {
            "a": 42.0,
            "b": 0.0
          },
          "expected_result": "success",
          "expected_contains": [
            "42"
          ]
        },
        {
          "id": "add_missing_a",
          "type": "missing_required",
          "description": "Missing first parameter",
          "params": {
            "b": 5.0
          },
          "expected_result": "error",
          "expected_contains": [
            "required",
            "a"
          ]
        },
        {
          "id": "add_missing_b",
          "type": "missing_required",
          "description": "Missing second parameter",
          "params": {
            "a": 10.0
          },
          "expected_result": "error",
          "expected_contains": [
            "required",
            "b"
          ]
        },
        {
          "id": "add_missing_both",
          "type": "missing_required",
          "description": "Missing both parameters",
          "params": {},
          "expected_result": "error",
          "expected_contains": [
            "required"
          ]
        },
        {
          "id": "add_invalid_type_a_string",
          "type": "invalid_type",
          "description": "Invalid type for first parameter (string)",
          "params": {
            "a": "five",
            "b": 3.0
          },
          "expected_result": "error",
          "expected_contains": [
            "type",
            "number"
          ]
        },
        {
          "id": "add_invalid_type_b_boolean",
          "type": "invalid_type",
          "description": "Invalid type for second parameter (boolean)",
          "params": {
            "a": 2.0,
            "b": true
          },
          "expected_result": "error",
          "expected_contains": [
            "type",
            "number"
          ]
        },
        {
          "id": "add_invalid_type_null",
          "type": "invalid_type",
          "description": "Null parameter value",
          "params": {
            "a": null,
            "b": 5.0
          },
          "expected_result": "error",
          "expected_contains": [
            "type",
            "number"
          ]
        },
        {
          "id": "add_edge_large_numbers",
          "type": "edge_case",
          "description": "Add very large numbers",
          "params": {
            "a": 1e+308,
            "b": 1e+308
          },
          "expected_result": "success",
          "expected_contains": [
            "2e+308"
          ]
        },
        {
          "id": "add_edge_small_numbers",
          "type": "edge_case",
          "description": "Add very small numbers",
          "params": {
            "a": 1e-308,
            "b": 1e-308
          },
          "expected_result": "success",
          "expected_contains": [
            "2e-308"
          ]
        },
        {
          "id": "add_edge_infinity",
          "type": "edge_case",
          "description": "Add with infinity",
          "params": {
            "a": Infinity,
            "b": 5.0
          },
          "expected_result": "success",
          "expected_contains": [
            "inf"
          ]
        }
      ]
    },
    {
      "tool": "sum",
      "description": "Add two numbers together",
      "test_cases": [
        {
          "id": "sum_valid_integers",
          "type": "valid_params",
          "description": "Sum two integers",
          "params": {
            "a": 100,
            "b": 200
          },
          "expected_result": "success",
          "expected_contains": [
            "300"
          ]
        },
        {
          "id": "sum_valid_floats",
          "type": "valid_params",
          "description": "Sum two floating point numbers",
          "params": {
            "a": 0.1,
            "b": 0.2
          },
          "expected_result": "success",
          "expected_contains": [
            "0.3"
          ]
        },
        {
          "id": "sum_valid_negative_result",
          "type": "valid_params",
          "description": "Sum resulting in negative",
          "params": {
            "a": -50,
            "b": 30
          },
          "expected_result": "success",
          "expected_contains": [
            "-20"
          ]
        },
        {
          "id": "sum_missing_a",
          "type": "missing_required",
          "description": "Missing first parameter",
          "params": {
            "b": 10
          },
          "expected_result": "error",
          "expected_contains": [
            "required",
            "a"
          ]
        },
        {
          "id": "sum_missing_b",
          "type": "missing_required",
          "description": "Missing second parameter",
          "params": {
            "a": 20
          },
          "expected_result": "error",
          "expected_contains": [
            "required",
            "b"
          ]
        },
        {
          "id": "sum_invalid_type_array",
          "type": "invalid_type",
          "description": "Array instead of number",
          "params": {
            "a": [
              1,
              2
            ],
            "b": 3
          },
          "expected_result": "error",
          "expected_contains": [
            "type",
            "number"
          ]
        },
        {
          "id": "sum_invalid_type_object",
          "type": "invalid_type",
          "description": "Object instead of number",
          "params": {
            "a": {
              "value": 5
            },
            "b": 10
          },
          "expected_result": "error",
          "expected_contains": [
            "type",
            "number"
          ]
        },
        {
          "id": "sum_edge_opposite_infinities",
          "type": "edge_case",
          "description": "Sum positive and negative infinity",
          "params": {
            "a": Infinity,
            "b": -Infinity
          },
          "expected_result": "success",
          "expected_contains": [
            "nan",
            "NaN"
          ]
        },
        {
          "id": "sum_edge_max_precision",
          "type": "edge_case",
          "description": "Sum with maximum precision decimals",
          "params": {
            "a": 0.123456789012345,
            "b": 0.987654321098765
          },
          "expected_result": "success",
          "expected_contains": [
            "1.11111"
          ]
        }
      ]
    },
    {
      "tool": "sum_many",
      "description": "Add multiple numbers together",
      "test_cases": [
        {
          "id": "sum_many_valid_multiple",
          "type": "valid_params",
          "description": "Sum multiple positive numbers",
          "params": {
            "numbers": [
              1,
              2,
              3,
              4,
              5
            ]
          },
          "expected_result": "success",
          "expected_contains": [
            "15"
          ]
        },
        {
          "id": "sum_many_valid_two",
          "type": "valid_params",
          "description": "Sum exactly two numbers",
          "params": {
            "numbers": [
              10.5,
              20.5
            ]
          },
          "expected_result": "success",
          "expected_contains": [
            "31"
          ]
        },
        {
          "id": "sum_many_valid_single",
          "type": "valid_params",
          "description": "Sum single number",
          "params": {
            "numbers": [
              42
            ]
          },
          "expected_result": "success",
          "expected_contains": [
            "42"
          ]
        },
        {
          "id": "sum_many_valid_mixed_signs",
          "type": "valid_params",
          "description": "Sum positive and negative numbers",
          "params": {
            "numbers": [
              10,
              -5,
              8,
              -3,
              2
            ]
          },
          "expected_result": "success",
          "expected_contains": [
            "12"
          ]
        },
        {
          "id": "sum_many_valid_decimals",
          "type": "valid_params",
          "description": "Sum decimal numbers",
          "params": {
            "numbers": [
              0.1,
              0.2,
              0.3,
              0.4
            ]
          },
          "expected_result": "success",
          "expected_contains": [
            "1"
          ]
        },
        {
          "id": "sum_many_valid_large_array",
          "type": "valid_params",
          "description": "Sum large array of numbers",
          "params": {
            "numbers": [
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1,
              1
            ]
          },
          "expected_result": "success",
          "expected_contains": [
            "20"
          ]
        },
        {
          "id": "sum_many_missing_numbers",
          "type": "missing_required",
          "description": "Missing numbers parameter",
          "params": {},
          "expected_result": "error",
          "expected_contains": [
            "required",
            "numbers"
          ]
        },
        {
          "id": "sum_many_invalid_type_string",
          "type": "invalid_type",
          "description": "String instead of array",
          "params": {
            "numbers": "1,2,3"
          },
          "expected_result": "error",
          "expected_contains": [
            "type",
            "array"
          ]
        },
        {
          "id": "sum_many_invalid_type_number",
          "type": "invalid_type",
          "description": "Single number instead of array",
          "params": {
            "numbers": 5
          },
          "expected_result": "error",
          "expected_contains": [
            "type",
            "array"
          ]
        },
        {
          "id": "sum_many_invalid_type_mixed_array",
          "type": "invalid_type",
          "description": "Array with non-numeric elements",
          "params": {
            "numbers": [
              1,
              "two",
              3,
              true
            ]
          },
          "expected_result": "error",
          "expected_contains": [
            "type",
            "number"
          ]
        },
        {
          "id": "sum_many_invalid_type_null_element",
          "type": "invalid_type",
          "description": "Array with null element",
          "params": {
            "numbers": [
              1,
              2,
              null,
              4
            ]
          },
          "expected_result": "error",
          "expected_contains": [
            "type",
            "number"
          ]
        },
        {
          "id": "sum_many_edge_empty_array",
          "type": "edge_case",
          "description": "Empty array",
          "params": {
            "numbers": []
          },
          "expected_result": "success",
          "expected_contains": [
            "0"
          ]
        },
        {
          "id": "sum_many_edge_zeros",
          "type": "edge_case",
          "description": "Array of zeros",
          "params": {
            "numbers": [
              0,
              0,
              0,
              0
            ]
          },
          "expected_result": "success",
          "expected_contains": [
            "0"
          ]
        },
        {
          "id": "sum_many_edge_overflow",
          "type": "edge_case",
          "description": "Sum causing overflow",
          "params": {
            "numbers": [
              1e+308,
              1e+308,
              1e+308
            ]
          },
          "expected_result": "success",
          "expected_contains": [
            "inf"
          ]
        },
        {
          "id": "sum_many_edge_cancellation",
          "type": "edge_case",
          "description": "Numbers that cancel out",
          "params": {
            "numbers": [
              1000,
              -1000,
              500,
              -500,
              0
            ]
          },
          "expected_result": "success",
          "expected_contains": [
            "0"
          ]
        }
      ]
    },
    {
      "tool": "multiply",
      "description": "Multiply two numbers together",
      "test_cases": [
        {
          "id": "multiply_valid_positive",
          "type": "valid_params",
          "description": "Multiply two positive numbers",
          "params": {
            "a": 6,
            "b": 7
          },
          "expected_result": "success",
          "expected_contains": [
            "42"
          ]
        },
        {
          "id": "multiply_valid_negative",
          "type": "valid_params",
          "description": "Multiply two negative numbers",
          "params": {
            "a": -4,
            "b": -5
          },
          "expected_result": "success",
          "expected_contains": [
            "20"
          ]
        },
        {
          "id": "multiply_valid_mixed_signs",
          "type": "valid_params",
          "description": "Multiply positive and negative",
          "params": {
            "a": 8,
            "b": -3
          },
          "expected_result": "success",
          "expected_contains": [
            "-24"
          ]
        },
        {
          "id": "multiply_valid_decimals",
          "type": "valid_params",
          "description": "Multiply decimal numbers",
          "params": {
            "a": 2.5,
            "b": 4.0
          },
          "expected_result": "success",
          "expected_contains": [
            "10"
          ]
        },
        {
          "id": "multiply_valid_by_one",
          "type": "valid_params",
          "description": "Multiply by one (identity)",
          "params": {
            "a": 123.456,
            "b": 1
          },
          "expected_result": "success",
          "expected_contains": [
            "123.456"
          ]
        },
        {
          "id": "multiply_missing_a",
          "type": "missing_required",
          "description": "Missing first parameter",
          "params": {
            "b": 5
          },
          "expected_result": "error",
          "expected_contains": [
            "required",
            "a"
          ]
        },
        {
          "id": "multiply_missing_b",
          "type": "missing_required",
          "description": "Missing second parameter",
          "params": {
            "a": 10
          },
          "expected_result": "error",
          "expected_contains": [
            "required",
            "b"
          ]
        },
        {
          "id": "multiply_invalid_type_string",
          "type": "invalid_type",
          "description": "String parameter",
          "params": {
            "a": "ten",
            "b": 5
          },
          "expected_result": "error",
          "expected_contains": [
            "type",
            "number"
          ]
        },
        {
          "id": "multiply_invalid_type_array",
          "type": "invalid_type",
          "description": "Array parameter",
          "params": {
            "a": 3,
            "b": [
              2
            ]
          },
          "expected_result": "error",
          "expected_contains": [
            "type",
            "number"
          ]
        },
        {
          "id": "multiply_edge_by_zero",
          "type": "edge_case",
          "description": "Multiply by zero",
          "params": {
            "a": 999999,
            "b": 0
          },
          "expected_result": "success",
          "expected_contains": [
            "0"
          ]
        },
        {
          "id": "multiply_edge_zero_by_zero",
          "type": "edge_case",
          "description": "Multiply zero by zero",
          "params": {
            "a": 0,
            "b": 0
          },
          "expected_result": "success",
          "expected_contains": [
            "0"
          ]
        },
        {
          "id": "multiply_edge_large_numbers",
          "type": "edge_case",
          "description": "Multiply large numbers",
          "params": {
            "a": 1e+150,
            "b": 1e+150
          },
          "expected_result": "success",
          "expected_contains": [
            "1e+300"
          ]
        },
        {
          "id": "multiply_edge_overflow",
          "type": "edge_case",
          "description": "Multiply causing overflow",
          "params": {
            "a": 1e+200,
            "b": 1e+200
          },
          "expected_result": "success",
          "expected_contains": [
            "inf"
          ]
        },
        {
          "id": "multiply_edge_small_decimals",
          "type": "edge_case",
          "description": "Multiply very small decimals",
          "params": {
            "a": 1e-150,
            "b": 1e-150
          },
          "expected_result": "success",
          "expected_contains": [
            "1e-300"
          ]
        },
        {
          "id": "multiply_edge_by_negative_one",
          "type": "edge_case",
          "description": "Multiply by negative one (negation)",
          "params": {
            "a": 42,
            "b": -1
          },
          "expected_result": "success",
          "expected_contains": [
            "-42"
          ]
        }
      ]
    },
    {
      "tool": "divide",
      "description": "Divide one number by another",
      "test_cases": [
        {
          "id": "divide_valid_even",
          "type": "valid_params",
          "description": "Divide with even result",
          "params": {
            "a": 20,
            "b": 4
          },
          "expected_result": "success",
          "expected_contains": [
            "5"
          ]
        },
        {
          "id": "divide_valid_decimal_result",
          "type": "valid_params",
          "description": "Divide with decimal result",
          "params": {
            "a": 10,
            "b": 3
          },
          "expected_result": "success",
          "expected_contains": [
            "3.333"
          ]
        },
        {
          "id": "divide_valid_negative_dividend",
          "type": "valid_params",
          "description": "Divide negative by positive",
          "params": {
            "a": -15,
            "b": 3
          },
          "expected_result": "success",
          "expected_contains": [
            "-5"
          ]
        },
        {
          "id": "divide_valid_negative_divisor",
          "type": "valid_params",
          "description": "Divide positive by negative",
          "params": {
            "a": 24,
            "b": -6
          },
          "expected_result": "success",
          "expected_contains": [
            "-4"
          ]
        },
        {
          "id": "divide_valid_both_negative",
          "type": "valid_params",
          "description": "Divide negative by negative",
          "params": {
            "a": -30,
            "b": -5
          },
          "expected_result": "success",
          "expected_contains": [
            "6"
          ]
        },
        {
          "id": "divide_valid_decimals",
          "type": "valid_params",
          "description": "Divide decimal numbers",
          "params": {
            "a": 7.5,
            "b": 2.5
          },
          "expected_result": "success",
          "expected_contains": [
            "3"
          ]
        },
        {
          "id": "divide_valid_by_one",
          "type": "valid_params",
          "description": "Divide by one (identity)",
          "params": {
            "a": 99.99,
            "b": 1
          },
          "expected_result": "success",
          "expected_contains": [
            "99.99"
          ]
        },
        {
          "id": "divide_missing_a",
          "type": "missing_required",
          "description": "Missing dividend",
          "params": {
            "b": 2
          },
          "expected_result": "error",
          "expected_contains": [
            "required",
            "a"
          ]
        },
        {
          "id": "divide_missing_b",
          "type": "missing_required",
          "description": "Missing divisor",
          "params": {
            "a": 10
          },
          "expected_result": "error",
          "expected_contains": [
            "required",
            "b"
          ]
        },
        {
          "id": "divide_invalid_type_string",
          "type": "invalid_type",
          "description": "String divisor",
          "params": {
            "a": 10,
            "b": "two"
          },
          "expected_result": "error",
          "expected_contains": [
            "type",
            "number"
          ]
        },
        {
          "id": "divide_invalid_type_boolean",
          "type": "invalid_type",
          "description": "Boolean dividend",
          "params": {
            "a": false,
            "b": 5
          },
          "expected_result": "error",
          "expected_contains": [
            "type",
            "number"
          ]
        },
        {
          "id": "divide_edge_by_zero",
          "type": "edge_case",
          "description": "Division by zero",
          "params": {
            "a": 10,
            "b": 0
          },
          "expected_result": "error",
          "expected_contains": [
            "zero",
            "division"
          ]
        },
        {
          "id": "divide_edge_zero_dividend",
          "type": "edge_case",
          "description": "Zero divided by number",
          "params": {
            "a": 0,
            "b": 5
          },
          "expected_result": "success",
          "expected_contains": [
            "0"
          ]
        },
        {
          "id": "divide_edge_very_small_divisor",
          "type": "edge_case",
          "description": "Divide by very small number",
          "params": {
            "a": 1,
            "b": 1e-308
          },
          "expected_result": "success",
          "expected_contains": [
            "1e+308"
          ]
        },
        {
          "id": "divide_edge_very_large_dividend",
          "type": "edge_case",
          "description": "Divide very large number",
          "params": {
            "a": 1e+308,
            "b": 10
          },
          "expected_result": "success",
          "expected_contains": [
            "1e+307"
          ]
        },
        {
          "id": "divide_edge_self_division",
          "type": "edge_case",
          "description": "Divide number by itself",
          "params": {
            "a": 42,
            "b": 42
          },
          "expected_result": "success",
          "expected_contains": [
            "1"
          ]
        },
        {
          "id": "divide_edge_infinity_dividend",
          "type": "edge_case",
          "description": "Divide infinity",
          "params": {
            "a": Infinity,
            "b": 2
          },
          "expected_result": "success",
          "expected_contains": [
            "inf"
          ]
        },
        {
          "id": "divide_edge_repeating_decimal",
          "type": "edge_case",
          "description": "Division resulting in repeating decimal",
          "params": {
            "a": 1,
            "b": 3
          },
          "expected_result": "success",
          "expected_contains": [
            "0.333"
          ]
        }
      ]
    }
  ]
}